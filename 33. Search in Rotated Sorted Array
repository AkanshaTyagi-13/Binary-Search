class Solution {
    public int mini(int[] nums){
        int len=nums.length;
        int s=0, e=len-1, ans=0;
        while(s<=e){
            int mid=s+(e-s)/2;
            int next=(mid+1)%len;
            int prev=(mid+len-1)%len;
            if(nums[mid]<nums[next]&&nums[mid]<nums[prev]){
                ans=mid;
                break;
            }
            else if(nums[mid]>nums[e]){
                s=mid+1;
            }
            else{
                e=mid-1;
            }
        }
        return ans;
    }
    public int binarySearch(int[] nums, int s, int e, int target){
        int ans=-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]==target){
                ans=mid;
                break;
            }
            else if(nums[mid]>target){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return ans;
    }
    public int search(int[] nums, int target) {
        int m=mini(nums);
        int bs1=binarySearch(nums,0,m-1,target);
        int bs2=binarySearch(nums,m,nums.length-1,target);
        int res=Math.max(bs1,bs2);
        return res;
    }
}
